// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NCBack.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NCBack.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NCBack.Models.AccedEventUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("AccedEventUser");
                });

            modelBuilder.Entity("NCBack.Models.AimOfTheMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameAimOfTheMeeting")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AimOfTheMeeting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAimOfTheMeeting = "Знакомство и общение"
                        },
                        new
                        {
                            Id = 2,
                            NameAimOfTheMeeting = "Поиск друга/Собеседника"
                        },
                        new
                        {
                            Id = 3,
                            NameAimOfTheMeeting = "Свидания и поиск второй половинки"
                        },
                        new
                        {
                            Id = 4,
                            NameAimOfTheMeeting = "Для родителей (Прогулка с детьми)"
                        },
                        new
                        {
                            Id = 5,
                            NameAimOfTheMeeting = "Встреча мусульман"
                        },
                        new
                        {
                            Id = 6,
                            NameAimOfTheMeeting = "Обсуждение фильма/сериала/книги"
                        },
                        new
                        {
                            Id = 7,
                            NameAimOfTheMeeting = "Совместный активные отдых"
                        },
                        new
                        {
                            Id = 8,
                            NameAimOfTheMeeting = "Совместные тренировки"
                        },
                        new
                        {
                            Id = 9,
                            NameAimOfTheMeeting = "Обсуждение разных проблем"
                        },
                        new
                        {
                            Id = 10,
                            NameAimOfTheMeeting = "Саморазвитие, обучение"
                        },
                        new
                        {
                            Id = 11,
                            NameAimOfTheMeeting = "Совместный отдых"
                        },
                        new
                        {
                            Id = 12,
                            NameAimOfTheMeeting = "Рыбалка и охота "
                        },
                        new
                        {
                            Id = 13,
                            NameAimOfTheMeeting = "Совместные онлайн игры"
                        },
                        new
                        {
                            Id = 14,
                            NameAimOfTheMeeting = "Совместные спортивные игры"
                        },
                        new
                        {
                            Id = 15,
                            NameAimOfTheMeeting = "Душевный разговор"
                        },
                        new
                        {
                            Id = 16,
                            NameAimOfTheMeeting = "Знакомства и встречи молодых людей"
                        },
                        new
                        {
                            Id = 17,
                            NameAimOfTheMeeting = "Практика языков"
                        },
                        new
                        {
                            Id = 18,
                            NameAimOfTheMeeting = "Обсуждение рабочих моментов"
                        },
                        new
                        {
                            Id = 19,
                            NameAimOfTheMeeting = "Встреча людей с ограниченными возможностями"
                        },
                        new
                        {
                            Id = 20,
                            NameAimOfTheMeeting = "Прогулка с животными"
                        },
                        new
                        {
                            Id = 21,
                            NameAimOfTheMeeting = "Совместное путешествие, туризм"
                        },
                        new
                        {
                            Id = 22,
                            NameAimOfTheMeeting = "Съёмки контента"
                        },
                        new
                        {
                            Id = 23,
                            NameAimOfTheMeeting = "Танцы"
                        },
                        new
                        {
                            Id = 24,
                            NameAimOfTheMeeting = "Послушать/Записать музыку"
                        },
                        new
                        {
                            Id = 25,
                            NameAimOfTheMeeting = "Творчество и изобразительное искусство"
                        },
                        new
                        {
                            Id = 26,
                            NameAimOfTheMeeting = "Встреча пожилых людей "
                        },
                        new
                        {
                            Id = 27,
                            NameAimOfTheMeeting = "Только девушки"
                        },
                        new
                        {
                            Id = 28,
                            NameAimOfTheMeeting = "Встреча туристов/Иностранцев"
                        },
                        new
                        {
                            Id = 29,
                            NameAimOfTheMeeting = "Встреча болельщиков/Фанатов"
                        },
                        new
                        {
                            Id = 30,
                            NameAimOfTheMeeting = "Совместная выпивка"
                        },
                        new
                        {
                            Id = 31,
                            NameAimOfTheMeeting = "Обсуждение идеи/бизнеса (брейншторм)"
                        });
                });

            modelBuilder.Entity("NCBack.Models.CityList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CityList");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Алматы"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Астана"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "Конаев"
                        },
                        new
                        {
                            Id = 4,
                            CityName = "Шымкент"
                        },
                        new
                        {
                            Id = 5,
                            CityName = "Караганда"
                        },
                        new
                        {
                            Id = 6,
                            CityName = "Тараз"
                        },
                        new
                        {
                            Id = 7,
                            CityName = "Семей"
                        },
                        new
                        {
                            Id = 8,
                            CityName = "Актобе"
                        },
                        new
                        {
                            Id = 9,
                            CityName = "Актау"
                        },
                        new
                        {
                            Id = 10,
                            CityName = "Атырау"
                        },
                        new
                        {
                            Id = 11,
                            CityName = "Костанай"
                        },
                        new
                        {
                            Id = 12,
                            CityName = "Петропавловск"
                        },
                        new
                        {
                            Id = 13,
                            CityName = "Павлодар"
                        },
                        new
                        {
                            Id = 14,
                            CityName = "Уральск"
                        },
                        new
                        {
                            Id = 15,
                            CityName = "Ускаман"
                        },
                        new
                        {
                            Id = 16,
                            CityName = "Кызылорда"
                        },
                        new
                        {
                            Id = 17,
                            CityName = "Талдыкорган"
                        },
                        new
                        {
                            Id = 18,
                            CityName = "Кокшетау"
                        });
                });

            modelBuilder.Entity("NCBack.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgeFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("AgeTo")
                        .HasColumnType("integer");

                    b.Property<int>("AimOfTheMeetingId")
                        .HasColumnType("integer");

                    b.Property<string>("CaltulationSum")
                        .HasColumnType("text");

                    b.Property<string>("CaltulationType")
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAdd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("IWant")
                        .HasColumnType("text");

                    b.Property<List<string>>("Interests")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("LanguageCommunication")
                        .HasColumnType("text[]");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int?>("MeatingPlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("MeetingCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TimeFinish")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("TimeStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AimOfTheMeetingId");

                    b.HasIndex("CityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MeatingPlaceId");

                    b.HasIndex("MeetingCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("NCBack.Models.GenderList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GenderList");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenderName = "М"
                        },
                        new
                        {
                            Id = 2,
                            GenderName = "Ж"
                        });
                });

            modelBuilder.Entity("NCBack.Models.IntermediateUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("Code")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GenderId");

                    b.ToTable("IntermediateUser");
                });

            modelBuilder.Entity("NCBack.Models.MeatingPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MeetingCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("NameMeatingPlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MeetingCategoryId");

                    b.ToTable("MeatingPlace");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Кафе"
                        },
                        new
                        {
                            Id = 2,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Ресторан"
                        },
                        new
                        {
                            Id = 3,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Кофейня"
                        },
                        new
                        {
                            Id = 4,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "ТРЦ"
                        },
                        new
                        {
                            Id = 5,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Пицерия"
                        },
                        new
                        {
                            Id = 6,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Суши бар"
                        },
                        new
                        {
                            Id = 7,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Фастфуд"
                        },
                        new
                        {
                            Id = 8,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Паб"
                        },
                        new
                        {
                            Id = 9,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Пивной бар"
                        },
                        new
                        {
                            Id = 10,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Стендап"
                        },
                        new
                        {
                            Id = 11,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Лаундж бар"
                        },
                        new
                        {
                            Id = 12,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Ночной клуб"
                        },
                        new
                        {
                            Id = 13,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Отель"
                        },
                        new
                        {
                            Id = 14,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Гостиница"
                        },
                        new
                        {
                            Id = 15,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Квартира"
                        },
                        new
                        {
                            Id = 16,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Коттедж"
                        },
                        new
                        {
                            Id = 17,
                            MeetingCategoryId = 1,
                            NameMeatingPlace = "Дача"
                        },
                        new
                        {
                            Id = 18,
                            MeetingCategoryId = 2,
                            NameMeatingPlace = "Горы"
                        },
                        new
                        {
                            Id = 19,
                            MeetingCategoryId = 2,
                            NameMeatingPlace = "На свежем воздухе"
                        },
                        new
                        {
                            Id = 20,
                            MeetingCategoryId = 2,
                            NameMeatingPlace = "Пешая прогулка"
                        },
                        new
                        {
                            Id = 21,
                            MeetingCategoryId = 2,
                            NameMeatingPlace = "На лавочке"
                        },
                        new
                        {
                            Id = 22,
                            MeetingCategoryId = 2,
                            NameMeatingPlace = "В парке"
                        },
                        new
                        {
                            Id = 23,
                            MeetingCategoryId = 2,
                            NameMeatingPlace = "Речка"
                        },
                        new
                        {
                            Id = 24,
                            MeetingCategoryId = 2,
                            NameMeatingPlace = "Озеро"
                        },
                        new
                        {
                            Id = 25,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Детский игровая зона"
                        },
                        new
                        {
                            Id = 26,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Компьютерный клуб "
                        },
                        new
                        {
                            Id = 27,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "PS клуб"
                        },
                        new
                        {
                            Id = 28,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Боулинг центр"
                        },
                        new
                        {
                            Id = 29,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Бильярдная"
                        },
                        new
                        {
                            Id = 30,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Ледовый Каток"
                        },
                        new
                        {
                            Id = 31,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Скейт/Ролл дром"
                        },
                        new
                        {
                            Id = 32,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Кинотеатр"
                        },
                        new
                        {
                            Id = 33,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Театр"
                        },
                        new
                        {
                            Id = 34,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Выставка и Музей"
                        },
                        new
                        {
                            Id = 35,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Дискотека"
                        },
                        new
                        {
                            Id = 36,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Караоке"
                        },
                        new
                        {
                            Id = 37,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Аквапарк"
                        },
                        new
                        {
                            Id = 38,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Атракционы"
                        },
                        new
                        {
                            Id = 39,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Зоопарк"
                        },
                        new
                        {
                            Id = 40,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Ботанический сад"
                        },
                        new
                        {
                            Id = 41,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Шахматы"
                        },
                        new
                        {
                            Id = 42,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Нарды"
                        },
                        new
                        {
                            Id = 43,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Монополия"
                        },
                        new
                        {
                            Id = 44,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Мафия"
                        },
                        new
                        {
                            Id = 45,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Антикафе"
                        },
                        new
                        {
                            Id = 46,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Квеструм"
                        },
                        new
                        {
                            Id = 47,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Пеинтбол центр"
                        },
                        new
                        {
                            Id = 48,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Тир"
                        },
                        new
                        {
                            Id = 49,
                            MeetingCategoryId = 3,
                            NameMeatingPlace = "Шопинг"
                        },
                        new
                        {
                            Id = 50,
                            MeetingCategoryId = 4,
                            NameMeatingPlace = "Баня"
                        },
                        new
                        {
                            Id = 51,
                            MeetingCategoryId = 4,
                            NameMeatingPlace = "Сауна"
                        },
                        new
                        {
                            Id = 52,
                            MeetingCategoryId = 4,
                            NameMeatingPlace = "Бассеин"
                        },
                        new
                        {
                            Id = 53,
                            MeetingCategoryId = 4,
                            NameMeatingPlace = "СПА салон"
                        },
                        new
                        {
                            Id = 54,
                            MeetingCategoryId = 4,
                            NameMeatingPlace = "Салон красоты"
                        },
                        new
                        {
                            Id = 55,
                            MeetingCategoryId = 4,
                            NameMeatingPlace = "Барбер шоп"
                        },
                        new
                        {
                            Id = 56,
                            MeetingCategoryId = 4,
                            NameMeatingPlace = "Санаторий"
                        },
                        new
                        {
                            Id = 57,
                            MeetingCategoryId = 4,
                            NameMeatingPlace = "Зона отдыха"
                        },
                        new
                        {
                            Id = 58,
                            MeetingCategoryId = 4,
                            NameMeatingPlace = "Массажный центр"
                        },
                        new
                        {
                            Id = 59,
                            MeetingCategoryId = 5,
                            NameMeatingPlace = "Теннисный корт"
                        },
                        new
                        {
                            Id = 60,
                            MeetingCategoryId = 5,
                            NameMeatingPlace = "Настольный теннис"
                        },
                        new
                        {
                            Id = 61,
                            MeetingCategoryId = 5,
                            NameMeatingPlace = "Футбольное поле"
                        },
                        new
                        {
                            Id = 62,
                            MeetingCategoryId = 5,
                            NameMeatingPlace = "Баскетбольное поле"
                        },
                        new
                        {
                            Id = 63,
                            MeetingCategoryId = 5,
                            NameMeatingPlace = "Волейбольная площадка"
                        },
                        new
                        {
                            Id = 64,
                            MeetingCategoryId = 5,
                            NameMeatingPlace = "Тренажёрный зал"
                        },
                        new
                        {
                            Id = 65,
                            MeetingCategoryId = 5,
                            NameMeatingPlace = "Фитнес клуб"
                        });
                });

            modelBuilder.Entity("NCBack.Models.MeetingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameMeetingCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MeetingCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameMeetingCategory = "В Заведении/Помещении"
                        },
                        new
                        {
                            Id = 2,
                            NameMeetingCategory = "На природе"
                        },
                        new
                        {
                            Id = 3,
                            NameMeetingCategory = "Развлечения и Игры"
                        },
                        new
                        {
                            Id = 4,
                            NameMeetingCategory = "Релакс, Красота и Здоровье  "
                        },
                        new
                        {
                            Id = 5,
                            NameMeetingCategory = "Спорт"
                        });
                });

            modelBuilder.Entity("NCBack.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LinkVideo")
                        .HasColumnType("text");

                    b.Property<string>("LinkWebSites")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("NCBack.Models.PhoneEditing", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("PhoneEditing");
                });

            modelBuilder.Entity("NCBack.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("NCBack.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("CredoAboutMyself")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("From")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("GetAcquaintedWith")
                        .HasColumnType("text");

                    b.Property<string>("IWantToLearn")
                        .HasColumnType("text");

                    b.Property<List<string>>("Interests")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("LanguageOfCommunication")
                        .HasColumnType("text[]");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MeetFor")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<List<string>>("PreferredPlaces")
                        .HasColumnType("text[]");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.Property<int?>("To")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Сhildren")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GenderId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NCBack.Models.UserEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeResult")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvent");
                });

            modelBuilder.Entity("NCBack.NotificationModels.NotificationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<bool>("IsAndroiodDevice")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("NotificationModel");
                });

            modelBuilder.Entity("NCBack.Models.AccedEventUser", b =>
                {
                    b.HasOne("NCBack.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NCBack.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NCBack.Models.Event", b =>
                {
                    b.HasOne("NCBack.Models.AimOfTheMeeting", "AimOfTheMeeting")
                        .WithMany()
                        .HasForeignKey("AimOfTheMeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NCBack.Models.CityList", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("NCBack.Models.GenderList", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("NCBack.Models.MeatingPlace", "MeatingPlace")
                        .WithMany()
                        .HasForeignKey("MeatingPlaceId");

                    b.HasOne("NCBack.Models.MeetingCategory", "MeetingCategory")
                        .WithMany()
                        .HasForeignKey("MeetingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NCBack.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AimOfTheMeeting");

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("MeatingPlace");

                    b.Navigation("MeetingCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NCBack.Models.IntermediateUser", b =>
                {
                    b.HasOne("NCBack.Models.CityList", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NCBack.Models.GenderList", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("NCBack.Models.MeatingPlace", b =>
                {
                    b.HasOne("NCBack.Models.MeetingCategory", "MeetingCategory")
                        .WithMany()
                        .HasForeignKey("MeetingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingCategory");
                });

            modelBuilder.Entity("NCBack.Models.User", b =>
                {
                    b.HasOne("NCBack.Models.CityList", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("NCBack.Models.GenderList", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.Navigation("City");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("NCBack.Models.UserEvent", b =>
                {
                    b.HasOne("NCBack.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NCBack.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
